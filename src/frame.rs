use byteorder::{NetworkEndian, ReadBytesExt};

use crate::coding;
use crate::reader;
use crate::util;

struct Component {
    id: u8,
    quant_table_id: u8,
    h_sampling: u8,
    v_sampling: u8,
}

#[derive(Default)]
pub struct Frame {
    #[allow(dead_code)]
    precision: u8,
    height: u16,
    width: u16,
    components: Vec<Component>,
    image: crate::image::RgbData,
}

struct ComponentScan<'a> {
    #[allow(dead_code)]
    id: u8,
    h_sampling: u8,
    v_sampling: u8,
    quant_table: &'a util::QuantizationTable,
    decoder: coding::Decoder<'a>,
}

impl Frame {
    pub fn parse(reader: &mut dyn std::io::Read) -> Result<Self, std::io::Error> {
        let _ = reader.read_u16::<NetworkEndian>()?;
        let precision = reader.read_u8()?;
        let height = reader.read_u16::<NetworkEndian>()?;
        let width = reader.read_u16::<NetworkEndian>()?;
        let component_count = reader.read_u8()? as usize;

        let components = (0..component_count)
            .map(|_| Component::parse(reader))
            .collect::<Result<Vec<Component>, std::io::Error>>()?;

        Ok(Frame {
            precision,
            height,
            width,
            components,
            image: crate::image::RgbData::new(width, height),
        })
    }

    pub fn rgb_data(&self) -> &[u8] {
        &self.image.rgb_data()
    }

    pub fn save(&self, path: &str) -> Result<(), std::io::Error> {
        let mut bmp_file = std::fs::File::create(path).unwrap();
        self.image.save_bmp(&mut bmp_file)?;
        Ok(())
    }

    pub fn process_scan(
        &mut self,
        reader: &mut dyn std::io::Read,
        quant_tables: &util::QuantizationTables,
        coding_tables: &coding::HuffmanTables,
    ) -> Result<(), std::io::Error> {
        let _ = reader.read_u16::<NetworkEndian>()?;
        let component_count = reader.read_u8()? as usize;
        let mut components = Vec::with_capacity(component_count);

        for _ in 0..component_count {
            let id = reader.read_u8()?;
            let tables = reader.read_u8()?;
            let dc_table_id = tables >> 4;
            let ac_table_id = tables & 0x0F;
            let component = self.components.iter().find(|f| f.id == id).expect("Can't find table");

            components.push(ComponentScan {
                id,
                h_sampling: component.h_sampling,
                v_sampling: component.v_sampling,
                quant_table: quant_tables
                    .find_table(component.quant_table_id)
                    .expect("Can't find quant table"),
                decoder: coding::Decoder::new(
                    coding_tables.find_dc_table(dc_table_id).expect("Can't find DC table"),
                    coding_tables.find_ac_table(ac_table_id).expect("Can't find AC table"),
                ),
            })
        }

        reader.read_u8()?;
        reader.read_u8()?;
        reader.read_u8()?;

        // TODO: handle 444 an 422 files
        // process the MCUs until the bitream runs out
        let x_blocks = self.width / 16;
        let y_blocks = self.height / 16;

        let mut bit_reader = reader::BitReader::new(reader);
        for y in 0..y_blocks {
            for x in 0..x_blocks {
                let y_p = components[0].process(&mut bit_reader).unwrap();
                let u_p = components[1].process(&mut bit_reader).unwrap();
                let v_p = components[2].process(&mut bit_reader).unwrap();

                self.image
                    .write_yuv420_mcu_fast(x * 16, y * 16, &y_p[0..256], &u_p[0..64], &v_p[0..64]);
            }
        }

        Ok(())
    }
}

impl Component {
    pub fn parse(reader: &mut dyn std::io::Read) -> Result<Self, std::io::Error> {
        let id = reader.read_u8()?;
        let sampling = reader.read_u8()?;
        let quant_table_id = reader.read_u8()?;

        Ok(Component {
            id,
            quant_table_id,
            h_sampling: sampling >> 4,
            v_sampling: sampling & 0x0F,
        })
    }
}

impl<'a> ComponentScan<'a> {
    pub fn process(&mut self, reader: &mut reader::BitReader) -> Result<Vec<i16>, std::io::Error> {
        let mut result: Vec<i16> = vec![0; 64 * self.v_sampling as usize * self.h_sampling as usize];

        for i in 0..self.v_sampling * self.h_sampling {
            let mut coef = self.decoder.decode_block(reader).unwrap();
            self.quant_table.dequantize(&mut coef);

            let block_start: usize = i as usize * 64;
            let block = &mut result[block_start..block_start + 64];
            crate::transform::transform_to_pixels(&coef, block);
        }

        Ok(result)
    }
}

#[cfg(test)]
mod tests {
    // Note this useful idiom: importing names from outer (for mod tests) scope.
    use super::*;

    const QUANTIZER_DATA: [u8; 67] = [
        0x00, 0x43, 0x00, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x06, 0x06, 0x06,
        0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x07, 0x07,
        0x07, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09,
        0x0A, 0x0A, 0x0A, 0x0C, 0x0C, 0x0B, 0x0B, 0x0E, 0x0E, 0x0E, 0x11, 0x11, 0x14,
    ];

    const HUFFMAN_DATA: [u8; 0x77] = [
        0x00, 0x77, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x06, 0x04, 0x07, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x03, 0x04, 0x10, 0x00, 0x02, 0x02, 0x01, 0x02, 0x06, 0x03, 0x00,
        0x02, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x03, 0x04, 0x05, 0x11, 0x12, 0x22, 0x31, 0x21,
        0x13, 0x00, 0x06, 0x07, 0x41, 0x23, 0x14, 0x81, 0x72, 0x51, 0x32, 0x08, 0x11, 0x00, 0x02, 0x01, 0x03, 0x03,
        0x04, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x03, 0x11, 0x00, 0x12, 0x51,
        0x21, 0x04, 0x81, 0x13, 0xA1, 0x31, 0x32, 0x71, 0xF1, 0x61, 0x41,
    ];

    const FRAME_DATA: [u8; 17] = [
        0x00, 0x011, 0x08, 0x00, 0x10, 0x00, 0x10, 0x03, 0x01, 0x22, 0x00, 0x02, 0x11, 0x00, 0x03, 0x11, 0x00,
    ];

    const SCAN_DATA: [u8; 605] = [
        0x00, 0x0C, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3F, 0x00, 0xC9, 0x72, 0xB6, 0x82, 0xCD, 0xE2,
        0xED, 0x11, 0x14, 0x51, 0xC6, 0xAB, 0x40, 0xDF, 0x46, 0x41, 0x0F, 0x0F, 0x75, 0xFF, 0x00, 0x91, 0x6E, 0x6B,
        0xC5, 0xBF, 0x06, 0x7A, 0xF4, 0x59, 0xFF, 0x00, 0x7E, 0xC6, 0x57, 0x30, 0xDF, 0x0C, 0x12, 0x8E, 0x4A, 0xD6,
        0xA9, 0x92, 0x75, 0x71, 0xBF, 0xBE, 0xDE, 0xAF, 0x4D, 0x66, 0xB1, 0xDB, 0x8F, 0xC1, 0xD1, 0xD3, 0x9E, 0xDE,
        0x4A, 0x0A, 0x55, 0x83, 0xB9, 0x3C, 0xF3, 0x55, 0xA5, 0x5C, 0x1B, 0xD9, 0xBE, 0x59, 0x4C, 0x63, 0x8C, 0x75,
        0xFA, 0x44, 0x4F, 0x89, 0xFD, 0x73, 0xF3, 0x68, 0xF8, 0x4F, 0xD5, 0xCB, 0xE3, 0x5C, 0x47, 0xB5, 0x67, 0xF3,
        0xCA, 0xB4, 0x39, 0x28, 0xA5, 0x9F, 0x19, 0x15, 0x55, 0x62, 0x2B, 0x04, 0x83, 0x1F, 0xBA, 0x7B, 0x02, 0x84,
        0x0F, 0xA8, 0x9D, 0x85, 0x18, 0xB2, 0x5C, 0xD6, 0x9F, 0xEF, 0xC1, 0x21, 0x76, 0xC1, 0x92, 0xF6, 0x93, 0xA7,
        0xF5, 0xFE, 0xDC, 0x09, 0xC8, 0x62, 0xB5, 0x2B, 0x23, 0xFF, 0x00, 0xA2, 0xBD, 0xAD, 0xE7, 0xFE, 0x42, 0xBF,
        0x5D, 0x36, 0xE0, 0xC2, 0xC5, 0x1E, 0x2D, 0x16, 0x9A, 0x8A, 0x99, 0x9F, 0x7E, 0xDC, 0x8F, 0x6F, 0x41, 0xD6,
        0xC1, 0xA8, 0xB5, 0x7C, 0xF6, 0x69, 0xE1, 0x4F, 0x57, 0xBE, 0x78, 0xBC, 0xDE, 0x32, 0xC3, 0x5B, 0x50, 0xDE,
        0xED, 0x4A, 0x9A, 0xD1, 0xA1, 0x9B, 0xF3, 0x3E, 0x6B, 0xA3, 0xE2, 0x5A, 0xF8, 0x82, 0x00, 0xC7, 0xC3, 0xEC,
        0x05, 0x7A, 0xBE, 0x6B, 0x2D, 0x14, 0xD6, 0xBB, 0x96, 0x72, 0xD6, 0x6E, 0x62, 0xBB, 0x83, 0x29, 0x4C, 0xDC,
        0xF2, 0x38, 0xE2, 0x9B, 0x44, 0x81, 0x59, 0x24, 0x83, 0x72, 0xDC, 0x29, 0x27, 0xE4, 0xB9, 0xBF, 0x5A, 0xA5,
        0x4F, 0x27, 0x89, 0x92, 0x93, 0xBD, 0x1D, 0x7B, 0x2F, 0xF9, 0x16, 0xEE, 0x5D, 0x9A, 0x2B, 0x08, 0xEC, 0x0C,
        0xAA, 0x49, 0x4C, 0x3B, 0x5D, 0x16, 0xE0, 0xE2, 0xD3, 0xEB, 0xCA, 0x0C, 0x40, 0x04, 0x2B, 0x56, 0x3F, 0x2F,
        0xB7, 0xBB, 0x77, 0xD1, 0xC9, 0xE0, 0xB1, 0x86, 0x59, 0x11, 0x22, 0x28, 0x89, 0x66, 0x93, 0xAD, 0x17, 0xF9,
        0x4A, 0x79, 0xBF, 0x1B, 0xD6, 0x72, 0x61, 0x86, 0xF6, 0xCC, 0x36, 0x58, 0xEB, 0x4B, 0x70, 0x31, 0xF9, 0x28,
        0xEF, 0xCB, 0x00, 0xAD, 0xA6, 0x63, 0x03, 0x26, 0x90, 0xEF, 0x5F, 0xDA, 0x7C, 0xBC, 0xD1, 0x7D, 0xA4, 0x9E,
        0x33, 0xD7, 0xE1, 0x51, 0x53, 0xC3, 0xE2, 0x66, 0xCD, 0xD9, 0xD2, 0x39, 0xED, 0x39, 0x2D, 0xDD, 0xA9, 0x04,
        0x88, 0xAF, 0x59, 0x73, 0xCA, 0x27, 0xD4, 0xF8, 0x83, 0x89, 0x0E, 0xA9, 0xB4, 0x9F, 0x2F, 0x24, 0xC4, 0xD4,
        0xBB, 0xEC, 0x93, 0xD7, 0x93, 0x21, 0x8D, 0xC7, 0x47, 0x2C, 0xE6, 0x38, 0xE8, 0x5C, 0x60, 0x3D, 0xD0, 0x09,
        0x0D, 0x39, 0x24, 0x90, 0xE3, 0x14, 0xA4, 0xDA, 0x85, 0xE8, 0x92, 0xE8, 0x3F, 0x7E, 0x51, 0xF3, 0x34, 0xF0,
        0xC9, 0xEC, 0x98, 0xCA, 0x15, 0xEA, 0x56, 0xC5, 0xC7, 0x4F, 0x11, 0x6C, 0x45, 0xDA, 0xE1, 0x8F, 0x75, 0xC2,
        0x10, 0xEF, 0x70, 0xEB, 0xB8, 0xCA, 0x01, 0xD6, 0x35, 0xD4, 0xBA, 0xAD, 0x7C, 0x26, 0x48, 0x9C, 0x4B, 0x57,
        0xE3, 0xDD, 0x9C, 0x23, 0x86, 0x46, 0xE3, 0x6E, 0x60, 0x1C, 0x4B, 0x47, 0xB7, 0xB4, 0xEC, 0xFD, 0xD9, 0xBD,
        0x8E, 0x6B, 0x01, 0x5F, 0x35, 0x35, 0x0C, 0xA4, 0x33, 0xC8, 0x3D, 0x99, 0xA2, 0x98, 0x55, 0x99, 0x2B, 0xF6,
        0xB8, 0xB6, 0x1A, 0xD1, 0x6E, 0x11, 0xE6, 0xC9, 0x7F, 0xD7, 0x91, 0x67, 0xBD, 0x7E, 0xD5, 0x5A, 0xB0, 0x28,
        0x6D, 0xDE, 0x08, 0x35, 0x91, 0x58, 0xA7, 0x6F, 0x4D, 0x69, 0xC7, 0x19, 0x0E, 0xE3, 0x06, 0x3D, 0x09, 0x10,
        0xED, 0x45, 0xF7, 0xD7, 0xCA, 0xF0, 0x98, 0xFC, 0x25, 0x77, 0x0D, 0x5B, 0xB7, 0xEC, 0xD9, 0x50, 0xEB, 0xD9,
        0xC8, 0x76, 0x17, 0xF1, 0x81, 0x14, 0x6C, 0xB6, 0xB0, 0xE8, 0x4C, 0xF7, 0x24, 0x3D, 0x79, 0xBF, 0x3A, 0xF3,
        0x83, 0x93, 0xDD, 0xFB, 0x15, 0xE8, 0x6C, 0x46, 0x35, 0xED, 0x22, 0x34, 0xE5, 0x8C, 0x13, 0xFD, 0x3B, 0x60,
        0xB5, 0xD1, 0x0B, 0xD0, 0x88, 0x57, 0x5F, 0x0E, 0x78, 0xC9, 0x5D, 0xB7, 0x6F, 0xA5, 0xEA, 0x5C, 0x8E, 0x3A,
        0xEF, 0x1E, 0x15, 0xEF, 0xD6, 0x83, 0x96, 0xE0, 0xD6, 0xBD, 0x6F,
    ];

    const RGB_DATA: [u8; 768] = [
        44, 49, 53, 79, 84, 88, 67, 83, 79, 15, 31, 27, 28, 39, 28, 29, 40, 29, 24, 34, 32, 27, 37, 35, 22, 33, 30, 22,
        33, 30, 28, 40, 26, 18, 30, 16, 47, 52, 41, 77, 82, 71, 43, 39, 40, 163, 159, 160, 35, 40, 44, 82, 87, 91, 58,
        74, 70, 11, 27, 23, 20, 31, 20, 27, 38, 27, 26, 36, 34, 18, 28, 26, 15, 26, 23, 21, 32, 29, 26, 38, 24, 10, 22,
        8, 60, 65, 54, 75, 80, 69, 61, 57, 58, 214, 210, 211, 38, 47, 48, 81, 90, 91, 44, 55, 52, 10, 21, 18, 21, 25,
        17, 35, 39, 31, 31, 39, 37, 18, 26, 24, 22, 33, 30, 31, 42, 39, 32, 45, 31, 23, 36, 22, 80, 85, 74, 61, 66, 55,
        83, 83, 84, 247, 247, 248, 67, 76, 77, 76, 85, 86, 24, 35, 32, 12, 23, 20, 26, 30, 22, 38, 42, 34, 29, 37, 35,
        21, 29, 27, 27, 38, 35, 29, 40, 37, 23, 36, 22, 37, 50, 36, 76, 81, 70, 40, 45, 34, 133, 133, 134, 255, 255,
        255, 90, 101, 99, 52, 63, 61, 17, 28, 17, 27, 38, 27, 29, 33, 24, 32, 36, 27, 28, 28, 28, 28, 28, 28, 30, 45,
        34, 28, 43, 32, 17, 32, 17, 52, 67, 52, 58, 69, 57, 49, 60, 48, 194, 209, 209, 235, 250, 250, 78, 89, 87, 20,
        31, 29, 17, 28, 17, 35, 46, 35, 25, 29, 20, 26, 30, 21, 27, 27, 27, 31, 31, 31, 29, 44, 33, 28, 43, 32, 22, 37,
        22, 52, 67, 52, 37, 48, 36, 86, 97, 85, 235, 250, 250, 209, 224, 224, 46, 56, 53, 8, 18, 15, 32, 35, 26, 34,
        37, 28, 17, 28, 16, 21, 32, 20, 32, 32, 32, 33, 33, 33, 30, 42, 30, 28, 40, 28, 32, 45, 30, 37, 50, 35, 25, 37,
        26, 140, 152, 141, 229, 255, 255, 191, 220, 222, 25, 35, 32, 14, 24, 21, 44, 47, 38, 24, 27, 18, 16, 27, 15,
        24, 35, 23, 33, 33, 33, 31, 31, 31, 25, 37, 25, 25, 37, 25, 44, 57, 42, 32, 45, 30, 35, 47, 36, 186, 198, 187,
        220, 249, 251, 196, 225, 227, 17, 28, 17, 36, 47, 36, 38, 42, 31, 19, 23, 12, 15, 28, 14, 26, 39, 25, 25, 36,
        25, 29, 40, 29, 26, 37, 25, 19, 30, 18, 43, 55, 41, 18, 30, 16, 63, 73, 71, 223, 233, 231, 188, 224, 232, 191,
        227, 235, 19, 30, 19, 46, 57, 46, 30, 34, 23, 20, 24, 13, 22, 35, 21, 22, 35, 21, 22, 33, 22, 21, 32, 21, 22,
        33, 21, 23, 34, 22, 27, 39, 25, 11, 23, 9, 108, 118, 116, 237, 247, 245, 186, 222, 230, 215, 251, 255, 26, 30,
        21, 47, 51, 42, 22, 34, 20, 15, 27, 13, 26, 38, 26, 26, 38, 26, 20, 27, 24, 33, 40, 37, 30, 41, 29, 25, 36, 24,
        26, 38, 24, 43, 55, 41, 175, 190, 190, 225, 240, 240, 186, 221, 233, 205, 240, 252, 36, 40, 31, 40, 44, 35, 25,
        37, 23, 19, 31, 17, 20, 32, 20, 30, 42, 30, 22, 29, 26, 23, 30, 27, 28, 39, 27, 29, 40, 28, 24, 36, 22, 93,
        105, 91, 222, 237, 237, 213, 228, 228, 189, 224, 236, 152, 187, 199, 48, 53, 42, 42, 47, 36, 20, 35, 21, 22,
        37, 23, 21, 25, 16, 31, 35, 26, 23, 23, 23, 9, 9, 9, 7, 19, 8, 20, 32, 21, 24, 38, 26, 138, 152, 140, 229, 250,
        253, 208, 229, 232, 205, 232, 250, 126, 153, 171, 48, 53, 42, 39, 44, 33, 17, 32, 18, 17, 32, 18, 31, 35, 26,
        29, 33, 24, 12, 12, 12, 65, 65, 65, 80, 92, 81, 34, 46, 35, 72, 86, 74, 196, 210, 198, 237, 255, 255, 189, 210,
        213, 181, 208, 226, 84, 111, 129, 46, 51, 40, 36, 41, 30, 17, 33, 19, 12, 28, 14, 41, 42, 33, 28, 29, 20, 7, 7,
        7, 151, 151, 151, 228, 243, 232, 99, 114, 103, 139, 158, 146, 243, 255, 250, 226, 249, 254, 174, 197, 202, 162,
        181, 203, 64, 83, 105, 51, 56, 45, 41, 46, 35, 20, 36, 22, 17, 33, 19, 37, 38, 29, 18, 19, 10, 14, 14, 14, 180,
        180, 180, 235, 250, 239, 97, 112, 101, 116, 135, 123, 203, 222, 210, 133, 156, 161, 140, 163, 168, 130, 149,
        171, 61, 80, 102,
    ];

    #[test]
    fn test_frame() {
        let mut quant_tables = crate::util::QuantizationTables::new();
        let mut quant_tables_reader = std::io::Cursor::new(QUANTIZER_DATA);
        quant_tables
            .parse(&mut quant_tables_reader)
            .expect("Error parsing quantizer tables");

        let mut coding_tables = crate::coding::HuffmanTables::new();
        let mut coding_tables_reader = std::io::Cursor::new(HUFFMAN_DATA);
        coding_tables
            .parse(&mut coding_tables_reader)
            .expect("Error parsing coding tables");

        let mut frame_reader = std::io::Cursor::new(FRAME_DATA);
        let mut frame = Frame::parse(&mut frame_reader).expect("Error parsing frame");

        let mut scan_reader = std::io::Cursor::new(SCAN_DATA);
        frame
            .process_scan(&mut scan_reader, &quant_tables, &coding_tables)
            .expect("Error parsing scan");

        assert_eq!(frame.rgb_data()[..], RGB_DATA[..]);
    }
}
